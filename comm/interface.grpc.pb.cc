// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: interface.proto

#include "interface.pb.h"
#include "interface.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace comm {

static const char* ImageService_method_names[] = {
  "/comm.ImageService/get_img_by_idx",
};

std::unique_ptr< ImageService::Stub> ImageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ImageService::Stub> stub(new ImageService::Stub(channel));
  return stub;
}

ImageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_get_img_by_idx_(ImageService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ImageService::Stub::get_img_by_idx(::grpc::ClientContext* context, const ::comm::IdxRequest& request, ::comm::ImgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_get_img_by_idx_, context, request, response);
}

void ImageService::Stub::experimental_async::get_img_by_idx(::grpc::ClientContext* context, const ::comm::IdxRequest* request, ::comm::ImgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_get_img_by_idx_, context, request, response, std::move(f));
}

void ImageService::Stub::experimental_async::get_img_by_idx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::comm::ImgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_get_img_by_idx_, context, request, response, std::move(f));
}

void ImageService::Stub::experimental_async::get_img_by_idx(::grpc::ClientContext* context, const ::comm::IdxRequest* request, ::comm::ImgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_get_img_by_idx_, context, request, response, reactor);
}

void ImageService::Stub::experimental_async::get_img_by_idx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::comm::ImgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_get_img_by_idx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::comm::ImgReply>* ImageService::Stub::Asyncget_img_by_idxRaw(::grpc::ClientContext* context, const ::comm::IdxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::comm::ImgReply>::Create(channel_.get(), cq, rpcmethod_get_img_by_idx_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::comm::ImgReply>* ImageService::Stub::PrepareAsyncget_img_by_idxRaw(::grpc::ClientContext* context, const ::comm::IdxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::comm::ImgReply>::Create(channel_.get(), cq, rpcmethod_get_img_by_idx_, context, request, false);
}

ImageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageService::Service, ::comm::IdxRequest, ::comm::ImgReply>(
          std::mem_fn(&ImageService::Service::get_img_by_idx), this)));
}

ImageService::Service::~Service() {
}

::grpc::Status ImageService::Service::get_img_by_idx(::grpc::ServerContext* context, const ::comm::IdxRequest* request, ::comm::ImgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace comm

